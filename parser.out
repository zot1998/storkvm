Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    COMMENT
    DIVIDE
    SEMICOLON
    IF
    ELSE
    EQUALS
    PLUS
    TIMES
    MINUS
    DOT
    OR

Grammar

Rule 0     S' -> condition_action
Rule 1     condition_action -> method COMMA ID
Rule 2     method -> method_append para RPAREN
Rule 3     method -> method_append RPAREN
Rule 4     method_append -> method_append para COMMA
Rule 5     method_append -> method_start
Rule 6     method_start -> ID LPAREN
Rule 7     para -> ID
Rule 8     para -> NUMBER

Terminals, with rules where they appear

AND                  : 
COMMA                : 1 4
COMMENT              : 
DIVIDE               : 
DOT                  : 
ELSE                 : 
EQUALS               : 
ID                   : 1 6 7
IF                   : 
LPAREN               : 6
MINUS                : 
NUMBER               : 8
OR                   : 
PLUS                 : 
RPAREN               : 2 3
SEMICOLON            : 
TIMES                : 
error                : 

Nonterminals, with rules where they appear

condition_action     : 0
method               : 1
method_append        : 2 3 4
method_start         : 5
para                 : 2 4

Parsing method: LALR

state 0

    (0) S' -> . condition_action
    (1) condition_action -> . method COMMA ID
    (2) method -> . method_append para RPAREN
    (3) method -> . method_append RPAREN
    (4) method_append -> . method_append para COMMA
    (5) method_append -> . method_start
    (6) method_start -> . ID LPAREN

    ID              shift and go to state 2

    method_start                   shift and go to state 1
    condition_action               shift and go to state 4
    method                         shift and go to state 5
    method_append                  shift and go to state 3

state 1

    (5) method_append -> method_start .

    RPAREN          reduce using rule 5 (method_append -> method_start .)
    ID              reduce using rule 5 (method_append -> method_start .)
    NUMBER          reduce using rule 5 (method_append -> method_start .)


state 2

    (6) method_start -> ID . LPAREN

    LPAREN          shift and go to state 6


state 3

    (2) method -> method_append . para RPAREN
    (3) method -> method_append . RPAREN
    (4) method_append -> method_append . para COMMA
    (7) para -> . ID
    (8) para -> . NUMBER

    RPAREN          shift and go to state 7
    ID              shift and go to state 10
    NUMBER          shift and go to state 9

    para                           shift and go to state 8

state 4

    (0) S' -> condition_action .



state 5

    (1) condition_action -> method . COMMA ID

    COMMA           shift and go to state 11


state 6

    (6) method_start -> ID LPAREN .

    RPAREN          reduce using rule 6 (method_start -> ID LPAREN .)
    ID              reduce using rule 6 (method_start -> ID LPAREN .)
    NUMBER          reduce using rule 6 (method_start -> ID LPAREN .)


state 7

    (3) method -> method_append RPAREN .

    COMMA           reduce using rule 3 (method -> method_append RPAREN .)


state 8

    (2) method -> method_append para . RPAREN
    (4) method_append -> method_append para . COMMA

    RPAREN          shift and go to state 13
    COMMA           shift and go to state 12


state 9

    (8) para -> NUMBER .

    RPAREN          reduce using rule 8 (para -> NUMBER .)
    COMMA           reduce using rule 8 (para -> NUMBER .)


state 10

    (7) para -> ID .

    RPAREN          reduce using rule 7 (para -> ID .)
    COMMA           reduce using rule 7 (para -> ID .)


state 11

    (1) condition_action -> method COMMA . ID

    ID              shift and go to state 14


state 12

    (4) method_append -> method_append para COMMA .

    RPAREN          reduce using rule 4 (method_append -> method_append para COMMA .)
    ID              reduce using rule 4 (method_append -> method_append para COMMA .)
    NUMBER          reduce using rule 4 (method_append -> method_append para COMMA .)


state 13

    (2) method -> method_append para RPAREN .

    COMMA           reduce using rule 2 (method -> method_append para RPAREN .)


state 14

    (1) condition_action -> method COMMA ID .

    $end            reduce using rule 1 (condition_action -> method COMMA ID .)

