Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    COMMENT
    DIVIDE
    SEMICOLON
    IF
    ELSE
    PLUS
    TIMES
    MINUS
    DOT
    OR

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression ID RPAREN
Rule 2     expression -> expression NUMBER RPAREN
Rule 3     expression -> expression ID COMMA
Rule 4     expression -> expression NUMBER COMMA
Rule 5     expression -> expression RPAREN
Rule 6     expression -> ID LPAREN
Rule 7     assignment -> ID EQUAL1 expression

Terminals, with rules where they appear

AND                  : 
COMMA                : 3 4
COMMENT              : 
DIVIDE               : 
DOT                  : 
ELSE                 : 
EQUAL1               : 7
ID                   : 1 3 6 7
IF                   : 
LPAREN               : 6
MINUS                : 
NUMBER               : 2 4
OR                   : 
PLUS                 : 
RPAREN               : 1 2 5
SEMICOLON            : 
TIMES                : 
error                : 

Nonterminals, with rules where they appear

assignment           : 
expression           : 1 2 3 4 5 7 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression ID RPAREN
    (2) expression -> . expression NUMBER RPAREN
    (3) expression -> . expression ID COMMA
    (4) expression -> . expression NUMBER COMMA
    (5) expression -> . expression RPAREN
    (6) expression -> . ID LPAREN

    ID              shift and go to state 2

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . ID RPAREN
    (2) expression -> expression . NUMBER RPAREN
    (3) expression -> expression . ID COMMA
    (4) expression -> expression . NUMBER COMMA
    (5) expression -> expression . RPAREN

    ID              shift and go to state 4
    NUMBER          shift and go to state 5
    RPAREN          shift and go to state 3


state 2

    (6) expression -> ID . LPAREN

    LPAREN          shift and go to state 6


state 3

    (5) expression -> expression RPAREN .

    ID              reduce using rule 5 (expression -> expression RPAREN .)
    NUMBER          reduce using rule 5 (expression -> expression RPAREN .)
    RPAREN          reduce using rule 5 (expression -> expression RPAREN .)
    $end            reduce using rule 5 (expression -> expression RPAREN .)


state 4

    (1) expression -> expression ID . RPAREN
    (3) expression -> expression ID . COMMA

    RPAREN          shift and go to state 7
    COMMA           shift and go to state 8


state 5

    (2) expression -> expression NUMBER . RPAREN
    (4) expression -> expression NUMBER . COMMA

    RPAREN          shift and go to state 9
    COMMA           shift and go to state 10


state 6

    (6) expression -> ID LPAREN .

    ID              reduce using rule 6 (expression -> ID LPAREN .)
    NUMBER          reduce using rule 6 (expression -> ID LPAREN .)
    RPAREN          reduce using rule 6 (expression -> ID LPAREN .)
    $end            reduce using rule 6 (expression -> ID LPAREN .)


state 7

    (1) expression -> expression ID RPAREN .

    ID              reduce using rule 1 (expression -> expression ID RPAREN .)
    NUMBER          reduce using rule 1 (expression -> expression ID RPAREN .)
    RPAREN          reduce using rule 1 (expression -> expression ID RPAREN .)
    $end            reduce using rule 1 (expression -> expression ID RPAREN .)


state 8

    (3) expression -> expression ID COMMA .

    ID              reduce using rule 3 (expression -> expression ID COMMA .)
    NUMBER          reduce using rule 3 (expression -> expression ID COMMA .)
    RPAREN          reduce using rule 3 (expression -> expression ID COMMA .)
    $end            reduce using rule 3 (expression -> expression ID COMMA .)


state 9

    (2) expression -> expression NUMBER RPAREN .

    ID              reduce using rule 2 (expression -> expression NUMBER RPAREN .)
    NUMBER          reduce using rule 2 (expression -> expression NUMBER RPAREN .)
    RPAREN          reduce using rule 2 (expression -> expression NUMBER RPAREN .)
    $end            reduce using rule 2 (expression -> expression NUMBER RPAREN .)


state 10

    (4) expression -> expression NUMBER COMMA .

    ID              reduce using rule 4 (expression -> expression NUMBER COMMA .)
    NUMBER          reduce using rule 4 (expression -> expression NUMBER COMMA .)
    RPAREN          reduce using rule 4 (expression -> expression NUMBER COMMA .)
    $end            reduce using rule 4 (expression -> expression NUMBER COMMA .)

